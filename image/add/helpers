#!/bin/bash

set -euo pipefail

# If specified value is true, return valid
# Else return invalid
#
# Allows concatenation via && and ||
evaluate_boolean() {
	if [ "${1}" == "True" ] || \
	   [ "${1}" == "true" ] || \
	   [ "${1}" == "1" ]; then
		return 0
	else
		return 1
	fi
}

# Test a mysql server
pgsql_ping() {
	local host="${1}" port="${2}"
	echo "Pinging PosgreSQL server ${host}:${port}"
	pg_isready -q -h "${host}" -p "${port}" -U "postgres"
}

# Wait until a PostgreSQL server becomes available
pgsql_wait() {
	export PGPASSWORD="${POSTGRES_PASSWORD}"
	until pgsql_ping "${1}" "${2}"; do
		sleep 1
	done
}

pgsql_test_credentials() {
	PGPASSWORD="${POSTGRES_PASSWORD}" psql -U "postgres" -h "${1}" -p "${2}" -c "\q"
}

pgsql_create_database() {
	export PGPASSWORD="${POSTGRES_PASSWORD}"
	if psql -lqt -U "postgres" -h "${1}" -p "${2}" | cut -d \| -f 1 | grep -qw "${3}"; then
		echo "=>${3} database already exists..."
	else
		echo "=>${3} database does not exist... creating it"
		psql -U "postgres" -h "${1}" -p "${2}" -c "CREATE DATABASE ${3};"
		if [ -f "${5}" ]; then
			psql -U "postgres" -h "${1}" -p "${2}" -d "${3}" < "${5}"
		fi
	fi
}

pgsql_create_user() {
	export PGPASSWORD="${POSTGRES_PASSWORD}"
	psql -U "postgres" -h "${1}" -p "${2}" -tc "SELECT 1 FROM pg_user WHERE usename = '${4}'" | \
	grep -q 1 || psql -U "postgres" -h "${1}" -p "${2}" -c "CREATE USER ${4} WITH PASSWORD '${5}'; GRANT ALL PRIVILEGES ON DATABASE ${3} to ${4};"
	psql -U "postgres" -h "${1}" -p "${2}" -d "${3}" -c "GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO ${4};"
	psql -U "postgres" -h "${1}" -p "${2}" -d "${3}" -c "GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO ${4};"
}

pgsql_insert_admin_user() {
	PGPASSWORD="${POSTGRES_PASSWORD}" psql -U "postgres" -h "${1}" -p "${2}" -d "${3}" -c "INSERT INTO 	\
		icingaweb_user (name, active, password_hash) 										\
			SELECT '${4}', 1, '${5}' 														\
				WHERE NOT EXISTS 															\
					(SELECT 1 FROM icingaweb_user WHERE name='${4}')"
}